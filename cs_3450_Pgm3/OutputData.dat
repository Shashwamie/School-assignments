1: 1: 2: [[Like Smalltalk, Python supports class methods, which differ from static ]]
3: 2: 4: [[methods in that the exact dynamic type of the object being operated on is ]]
5: 3: 6: [[an implicit parameter to the method (as a type object).  The following ]]
7: 4: 8: [[example keeps a separate per-class object counter for every class in a ]]
9: 5: 10: [[hierarchy (in this case, a Shape hierarchy): ]]
11: 6: 12: [[]]
13: 7: 14: [[class Shape(object):]]
15: 8: 16: [[    _count = 0	# A shared value for Shape classes with no current objects]]
17: 9: 18: [[  	]]
19: 10: 20: [[    @classmethod]]
21: 11: 22: [[    def _incr(cls):]]
23: 12: 24: [[        cls._count += 1         # Create/update class attribute]]
25: 13: 26: [[      ]]
27: 14: 28: [[    @classmethod]]
29: 15: 30: [[    def showCount(cls):]]
31: 16: 32: [[        print 'Class %s has count = %s' % (cls.__name__, cls._count)]]
33: 17: 34: [[        ]]
35: 18: 36: [[    def __init__(self):		# A constructor]]
37: 19: 38: [[        self._incr()]]
39: 20: 40: [[]]
41: 21: 42: [[class Point(Shape): pass	# An empty subclass of Shape]]
43: 22: 44: [[class Line(Shape): pass		# Ditto]]
45: 23: 46: [[]]
47: 24: 48: [[This requires some perusing if you're new to Python.  Python requires ]]
49: 25: 50: [[indentation to show logical subordination (whereas good programmers of ]]
51: 26: 52: [[other languages indent by convention), so you can readily see that the ]]
53: 27: 54: [[class Shape has three methods, _incr, showCount, and __init__.  The latter ]]
55: 28: 56: [[is the special name used for constructors.  The other two methods are ]]
57: 29: 58: [[class methods (indicated by the @classmethod prefix), so their parameter ]]
59: 30: 60: [[is the unique class object for the instance on which they are invoked.  ]]
61: 31: 62: [[(The term "class object" here refers to a unique, bona fide object that ]]
63: 32: 64: [[describes a class type, similar to, but more robust than, std::type_info ]]
65: 33: 66: [[objects in C++.) The method named _incr is only called by the constructor.  ]]
67: 34: 68: [[]]
